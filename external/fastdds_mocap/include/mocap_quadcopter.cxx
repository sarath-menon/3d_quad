// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file mocap_quadcopter.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "mocap_quadcopter.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

mocap_quadcopter::mocap_quadcopter()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@27f723
    m_index = 0;
    // m_position com.eprosima.idl.parser.typecode.ArrayTypeCode@670b40af
    memset(&m_position, 0, (3) * 8);
    // m_orientation_quaternion com.eprosima.idl.parser.typecode.ArrayTypeCode@4923ab24
    memset(&m_orientation_quaternion, 0, (4) * 8);
    // m_orientation_euler com.eprosima.idl.parser.typecode.ArrayTypeCode@44c8afef
    memset(&m_orientation_euler, 0, (3) * 8);
    // m_delay com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7b69c6ba
    m_delay = 0.0;
    // m_object_name com.eprosima.idl.parser.typecode.StringTypeCode@46daef40
    m_object_name ="";

}

mocap_quadcopter::~mocap_quadcopter()
{






}

mocap_quadcopter::mocap_quadcopter(
        const mocap_quadcopter& x)
{
    m_index = x.m_index;
    m_position = x.m_position;
    m_orientation_quaternion = x.m_orientation_quaternion;
    m_orientation_euler = x.m_orientation_euler;
    m_delay = x.m_delay;
    m_object_name = x.m_object_name;
}

mocap_quadcopter::mocap_quadcopter(
        mocap_quadcopter&& x)
{
    m_index = x.m_index;
    m_position = std::move(x.m_position);
    m_orientation_quaternion = std::move(x.m_orientation_quaternion);
    m_orientation_euler = std::move(x.m_orientation_euler);
    m_delay = x.m_delay;
    m_object_name = std::move(x.m_object_name);
}

mocap_quadcopter& mocap_quadcopter::operator =(
        const mocap_quadcopter& x)
{

    m_index = x.m_index;
    m_position = x.m_position;
    m_orientation_quaternion = x.m_orientation_quaternion;
    m_orientation_euler = x.m_orientation_euler;
    m_delay = x.m_delay;
    m_object_name = x.m_object_name;

    return *this;
}

mocap_quadcopter& mocap_quadcopter::operator =(
        mocap_quadcopter&& x)
{

    m_index = x.m_index;
    m_position = std::move(x.m_position);
    m_orientation_quaternion = std::move(x.m_orientation_quaternion);
    m_orientation_euler = std::move(x.m_orientation_euler);
    m_delay = x.m_delay;
    m_object_name = std::move(x.m_object_name);

    return *this;
}

size_t mocap_quadcopter::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((4) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((3) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t mocap_quadcopter::getCdrSerializedSize(
        const mocap_quadcopter& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((3) > 0)
    {
        current_alignment += ((3) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    if ((4) > 0)
    {
        current_alignment += ((4) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.object_name().size() + 1;


    return current_alignment - initial_alignment;
}

void mocap_quadcopter::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_position;

    scdr << m_orientation_quaternion;

    scdr << m_orientation_euler;

    scdr << m_delay;
    scdr << m_object_name;

}

void mocap_quadcopter::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_position;

    dcdr >> m_orientation_quaternion;

    dcdr >> m_orientation_euler;

    dcdr >> m_delay;
    dcdr >> m_object_name;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void mocap_quadcopter::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t mocap_quadcopter::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& mocap_quadcopter::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void mocap_quadcopter::position(
        const std::array<double, 3>& _position)
{
    m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void mocap_quadcopter::position(
        std::array<double, 3>&& _position)
{
    m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const std::array<double, 3>& mocap_quadcopter::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
std::array<double, 3>& mocap_quadcopter::position()
{
    return m_position;
}
/*!
 * @brief This function copies the value in member orientation_quaternion
 * @param _orientation_quaternion New value to be copied in member orientation_quaternion
 */
void mocap_quadcopter::orientation_quaternion(
        const std::array<double, 4>& _orientation_quaternion)
{
    m_orientation_quaternion = _orientation_quaternion;
}

/*!
 * @brief This function moves the value in member orientation_quaternion
 * @param _orientation_quaternion New value to be moved in member orientation_quaternion
 */
void mocap_quadcopter::orientation_quaternion(
        std::array<double, 4>&& _orientation_quaternion)
{
    m_orientation_quaternion = std::move(_orientation_quaternion);
}

/*!
 * @brief This function returns a constant reference to member orientation_quaternion
 * @return Constant reference to member orientation_quaternion
 */
const std::array<double, 4>& mocap_quadcopter::orientation_quaternion() const
{
    return m_orientation_quaternion;
}

/*!
 * @brief This function returns a reference to member orientation_quaternion
 * @return Reference to member orientation_quaternion
 */
std::array<double, 4>& mocap_quadcopter::orientation_quaternion()
{
    return m_orientation_quaternion;
}
/*!
 * @brief This function copies the value in member orientation_euler
 * @param _orientation_euler New value to be copied in member orientation_euler
 */
void mocap_quadcopter::orientation_euler(
        const std::array<double, 3>& _orientation_euler)
{
    m_orientation_euler = _orientation_euler;
}

/*!
 * @brief This function moves the value in member orientation_euler
 * @param _orientation_euler New value to be moved in member orientation_euler
 */
void mocap_quadcopter::orientation_euler(
        std::array<double, 3>&& _orientation_euler)
{
    m_orientation_euler = std::move(_orientation_euler);
}

/*!
 * @brief This function returns a constant reference to member orientation_euler
 * @return Constant reference to member orientation_euler
 */
const std::array<double, 3>& mocap_quadcopter::orientation_euler() const
{
    return m_orientation_euler;
}

/*!
 * @brief This function returns a reference to member orientation_euler
 * @return Reference to member orientation_euler
 */
std::array<double, 3>& mocap_quadcopter::orientation_euler()
{
    return m_orientation_euler;
}
/*!
 * @brief This function sets a value in member delay
 * @param _delay New value for member delay
 */
void mocap_quadcopter::delay(
        float _delay)
{
    m_delay = _delay;
}

/*!
 * @brief This function returns the value of member delay
 * @return Value of member delay
 */
float mocap_quadcopter::delay() const
{
    return m_delay;
}

/*!
 * @brief This function returns a reference to member delay
 * @return Reference to member delay
 */
float& mocap_quadcopter::delay()
{
    return m_delay;
}

/*!
 * @brief This function copies the value in member object_name
 * @param _object_name New value to be copied in member object_name
 */
void mocap_quadcopter::object_name(
        const std::string& _object_name)
{
    m_object_name = _object_name;
}

/*!
 * @brief This function moves the value in member object_name
 * @param _object_name New value to be moved in member object_name
 */
void mocap_quadcopter::object_name(
        std::string&& _object_name)
{
    m_object_name = std::move(_object_name);
}

/*!
 * @brief This function returns a constant reference to member object_name
 * @return Constant reference to member object_name
 */
const std::string& mocap_quadcopter::object_name() const
{
    return m_object_name;
}

/*!
 * @brief This function returns a reference to member object_name
 * @return Reference to member object_name
 */
std::string& mocap_quadcopter::object_name()
{
    return m_object_name;
}

size_t mocap_quadcopter::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool mocap_quadcopter::isKeyDefined()
{
    return false;
}

void mocap_quadcopter::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}
